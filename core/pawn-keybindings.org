#+TITLE:Global Keybindings
#+AUTHOR: graypawn
#+EMAIL: choi.pawn@gmail.com
#+OPTIONS: toc:2 num:nil ^:nil

#+BEGIN_SRC emacs-lisp
;; Disable key.
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-t"))
(global-unset-key (kbd "C-h C-h"))

;; Switch to the scratch buffer
(global-set-key (kbd "C-t s") 'pawn/switch-buffer-scratch)
;; Switch to the messages buffer
(global-set-key (kbd "C-t m") 'pawn/switch-buffer-messages)

;; open an ansi-term buffer
(global-set-key (kbd "M-'") 'prelude-visit-term-buffer)

;; If you want to be able to M-x without meta
(global-set-key (kbd "C-x C-m") 'execute-extended-command)

;; File finding
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-unset-key (kbd "C-x f"))
(global-set-key (kbd "C-x f l") 'lgrep)
(global-set-key (kbd "C-x f r") 'rgrep)
(global-set-key (kbd "C-x f z") 'zgrep)
(global-set-key (kbd "C-x f g") 'find-grep-dired)
(global-set-key (kbd "C-x f n") 'find-name-dired)

;; Start proced in a similar manner to dired
(global-set-key (kbd "C-x p") 'proced)

;; use hippie-expand instead of dabbrev
(global-set-key (kbd "M-/") 'hippie-expand)

;; Use my custom function to save buffer.
(global-set-key (kbd "C-x C-s") 'pawn/save-buffer)

;; Should be able to pawn/eval-and-replace anywhere.
(global-set-key (kbd "C-x M-e") 'pawn/eval-and-replace)

;; Toggle executable permissions on current file.
(global-set-key (kbd "C-+") 'pawn/toggle-file-executable)

;; Renames current buffer and file it is visiting.
(global-set-key (kbd "C-x C-r") 'pawn/rename-current-buffer-file)

;; Removes file connected to current buffer and kills buffer.
(global-set-key (kbd "C-x C-d") 'pawn/delete-current-buffer-file)

;; Clone current buffer.
;; And if universal-argument is true then, open file.
(global-set-key (kbd "C-x c") 'pawn/clone-file)

;; Input Method
(global-set-key (kbd "C-\\") 'pawn/toggle-input-method)

;; Search
(global-unset-key (kbd "C-x s"))
(global-set-key (kbd "C-x s g") 'prelude-google)
(global-set-key (kbd "C-x s G") 'prelude-github)

;; Replace current buffer text with the text of the visited file on disk
(global-set-key (kbd "<f5>") 'revert-buffer)

;; Select and activate input method.
(global-set-key (kbd "C-|") 'set-input-method)

;; Indentation help
(global-set-key (kbd "C-x ^") 'join-line)

;; Activate occur easily inside isearch
(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)

(global-set-key (kbd "M-F") 'auto-fill-mode)
#+END_SRC
* Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra :ensure t)
#+END_SRC
** Hydra Macro
| Key     | Function                  |
|---------+---------------------------|
| C-x (   | kmacro-start-macro        |
| C-x )   | kmacro-end-macro          |
| C-x e   | kmacro-end-and-call-macro |
| C-x C-k | hydra-macro/body          |
#+BEGIN_SRC emacs-lisp
(defhydra hydra-macro (:hint nil :color pink :pre
                             (when defining-kbd-macro
                               (kmacro-end-macro 1)))
"
 ^Cycle^     ^Basic^          ^Insert^        ^Save^          ^^Edit^^
╭─────────────────────────────────────────────────────────────────────────╯
   ^_p_^    [_e_] execute    [_i_] insert    [_b_] name      [_;_] previous
   ^^↑^^    [_d_] delete     [_c_] set       [_k_] key       [_,_] select
   ^^ ^^    [_r_] region     [_a_] add       [_F_] defun
   ^^↓^^    [_s_] step       [_f_] format
   ^_n_^
  ^^   ^^                  ^^Counter: %s(number-to-string kmacro-counter)
"
  ("p" kmacro-cycle-ring-previous)
  ("n" kmacro-cycle-ring-next)
  ("e" kmacro-end-and-call-macro)
  ("d" kmacro-delete-ring-head)
  ("r" apply-macro-to-region-lines)
  ("s" kmacro-step-edit-macro)
  ("i" kmacro-insert-counter)
  ("c" kmacro-set-counter)
  ("a" kmacro-add-counter)
  ("f" kmacro-set-format)
  ("b" kmacro-name-last-macro)
  ("k" kmacro-bind-to-key)
  ("F" insert-kbd-macro)
  (";" kmacro-edit-macro)
  ("," edit-kbd-macro)
  ("q" nil :color blue))

(bind-key "C-x C-k" 'hydra-macro/body)
#+END_SRC
** Hydra Unicode
#+BEGIN_SRC emacs-lisp
(defhydra hydra-greek (:color pink :hint nil)
"
  [_a_] α [_b_] β [_g_] γ [_d_] δ [_e_] ε [_z_] ζ [_h_] η [_q_] θ [_i_] ι [_k_] κ [_l_] λ [_m_] μ
  [_n_] ν [_x_] ξ [_o_] ο [_p_] π [_r_] ρ [_s_] σ [_t_] τ [_u_] υ [_j_] φ [_c_] χ [_y_] ψ [_w_] ω

  [_A_] Α [_B_] Β [_G_] Γ [_D_] Δ [_E_] Ε [_Z_] Ζ [_H_] Η [_Q_] Θ [_I_] Ι [_K_] Κ [_l_] Λ [_M_] Μ  ╭────────────┐
  [_N_] Ν [_X_] Ξ [_O_] Ο [_P_] Π [_R_] Ρ [_S_] Σ [_T_] Τ [_U_] Υ [_J_] Φ [_C_] Χ [_Y_] Ψ [_W_] Ω   Quit [_<ESC>_]
"
  ("a" (insert "α"))
  ("b" (insert "β"))
  ("g" (insert "γ"))
  ("d" (insert "δ"))
  ("e" (insert "ε"))
  ("z" (insert "ζ"))
  ("h" (insert "η"))
  ("q" (insert "θ"))
  ("i" (insert "ι"))
  ("k" (insert "κ"))
  ("l" (insert "λ"))
  ("m" (insert "μ"))
  ("n" (insert "ν"))
  ("x" (insert "ξ"))
  ("o" (insert "ο"))
  ("p" (insert "π"))
  ("r" (insert "ρ"))
  ("s" (insert "σ"))
  ("t" (insert "τ"))
  ("u" (insert "υ"))
  ("f" (insert "ϕ"))
  ("j" (insert "φ"))
  ("c" (insert "χ"))
  ("y" (insert "ψ"))
  ("w" (insert "ω"))
  ("A" (insert "Α"))
  ("B" (insert "Β"))
  ("G" (insert "Γ"))
  ("D" (insert "Δ"))
  ("E" (insert "Ε"))
  ("Z" (insert "Ζ"))
  ("H" (insert "Η"))
  ("Q" (insert "Θ"))
  ("I" (insert "Ι"))
  ("K" (insert "Κ"))
  ("L" (insert "Λ"))
  ("M" (insert "Μ"))
  ("N" (insert "Ν"))
  ("X" (insert "Ξ"))
  ("O" (insert "Ο"))
  ("P" (insert "Π"))
  ("R" (insert "Ρ"))
  ("S" (insert "Σ"))
  ("T" (insert "Τ"))
  ("U" (insert "Υ"))
  ("F" (insert "Φ"))
  ("J" (insert "Φ"))
  ("C" (insert "Χ"))
  ("Y" (insert "Ψ"))
  ("W" (insert "Ω"))
  ("<ESC>" nil :color blue))

(defhydra hydra-box-drawing (:color pink :hint nil)
"
       ^[_-_]^          ^[_i_]
   [_a_] ╭─╮ [_s_]  [_d_] ┌┴┐ [_f_]  [_RET_]^      ╲ ╱
   [_|_] │ │  ^ ^   [_j_] ┤ ├ [_l_]    ^┼    [_*_]  ╳
   [_z_] ╰─╯ [_x_]  [_c_] └┬┘ [_v_]^         [_[_] ╱ ╲ [_]_]
             ^^ ^^      ^[_k_]
"
  ("-" (insert "─"))
  ("|" (insert "│"))
  ("a" (insert "╭"))
  ("s" (insert "╮"))
  ("z" (insert "╰"))
  ("x" (insert "╯"))
  ("d" (insert "┌"))
  ("f" (insert "┐"))
  ("c" (insert "└"))
  ("v" (insert "┘"))
  ("j" (insert "┤"))
  ("l" (insert "├"))
  ("i" (insert "┴"))
  ("k" (insert "┬"))
  ("RET" (insert "┼"))
  ("*" (insert "╳"))
  ("[" (insert "╱"))
  ("]" (insert "╲"))
  ("q" nil :color blue)
)

(defhydra hydra-unicode (:color pink :hint nil)
"
        [_._] · [_m_] µ [_|_] ¦ [_`_] ° [_-_] ─
Math:   [_8_] ∞ [_+_] ± [_-_] ∓ [_/_] ÷ [_r_] √ [_<_] ≤ [_>_] ≥ [_=_] ≡ [_n_] ≠ [_~_] ≈
Arrows: [_<left>_] ← [_<right>_] → [_<up>_] ↑ [_<down>_] ↓
        [_g_] greek [_b_] box [_RET_] insert-char
"
  ("m" (insert "µ"))
  ("|" (insert "¦"))
  ("." (insert "·"))
  ("`" (insert "°"))
  ("8" (insert "∞"))
  ("+" (insert "±"))
  ("-" (insert "∓"))
  ("/" (insert "÷"))
  ("r" (insert "√"))
  ("<" (insert "≤"))
  (">" (insert "≥"))
  ("=" (insert "≡"))
  ("n" (insert "≠"))
  ("~" (insert "≈"))
  ("-" (insert "─"))
  ("<left>" (insert "←"))
  ("<right>" (insert "→"))
  ("<up>" (insert "↑"))
  ("<down>" (insert "↓"))
  ("g" hydra-greek/body :color blue)
  ("b" hydra-box-drawing/body :color blue)
  ("RET" insert-char :color blue)
  ("q" nil :color blue)
)

(bind-key "C-x 8" 'hydra-unicode/body)
#+END_SRC
